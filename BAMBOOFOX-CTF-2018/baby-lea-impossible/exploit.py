#!/usr/bin/env python3
import hashlib
import itertools
from base64 import b64encode, b64decode
from pwn import *

def xorbytes(*args):
    L = len(args[0])
    ans = 0
    for x in args:
        assert(len(x) == L)
        ans ^= int.from_bytes(x, byteorder = "little")
    return ans.to_bytes(L, byteorder = "little")

r = remote("bamboofox.cs.nctu.edu.tw", 58790)

def solve_proof():
    line = r.recvuntil('\n').strip()
    tail = line.split(b'+')[1].strip().split(b')')[0].strip()
    result = line.split(b' == ')[1].strip()
    r.recvuntil(b':')

    for word in itertools.product(string.ascii_letters + string.digits, repeat = 4):
        head = ''.join(word).encode('ascii')
        if result.decode('ascii') == hashlib.sha256(head + tail).hexdigest():
            r.sendline(head)
            break

solve_proof()

print("proof of work complete")

def send(token, auth):
    r.sendlineafter("input your token: ", b64encode(token))
    r.sendlineafter("input your authentication code: ", auth)
    result = r.recvline().strip()
    return result

oks = []
# can't use the original token, use homemade jedi instead
jedi_cipher = b'\x00' * 16
jedi_plain = b""
jedi_plain_last = 0

for i in range(256):
    token = b'\x00' * 15 + bytes([i]) + jedi_cipher
    auth = hashlib.sha256(b"").hexdigest()
    result = send(token, auth)
    if result == b"YOU ARE NOT ALLOW TO CHANGE MY TOKEN!": oks.append(i)

salt_length = len(oks) + 1 - 16
salt = b""
print("salt length:", salt_length)

# calculate jedi plain text last byte
for i in range(256):
    success = True
    for ok in oks:
        if not (0 < i ^ ok < salt_length + 16):
            success = False
            break
    if success:
        jedi_plain_last = i

# manipulate last padding byte to leak salt and jedi
for i in range(salt_length + 15):
    token = b'\x00' * 15 + bytes([0 ^ jedi_plain_last ^ (16 + salt_length - 1 - i)]) + jedi_cipher
    for k in range(256):
        auth = hashlib.sha256(salt + jedi_plain + bytes([k])).hexdigest()
        result = send(token, auth)
        if result == b"YOU ARE NOT ADMIN, GO AWAY!":
            if i < salt_length: salt += bytes([k])
            else: jedi_plain += bytes([k])
            print("salt:", salt)
            print("jedi plain:", jedi_plain)
            break

jedi_plain += bytes([jedi_plain_last])

token = xorbytes(b'\x00' * 16, jedi_plain, b"user=admin\x06\x06\x06\x06\x06\x06") + jedi_cipher
auth = hashlib.sha256(salt + b"user=admin").hexdigest()

print(send(token, auth).decode('utf-8'))
